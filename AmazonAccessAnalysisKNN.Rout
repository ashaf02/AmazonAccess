
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(kknn)
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Use tidymodels_prefer() to resolve common conflicts.
> library(embed)
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> 
> ## Read in the data
> amazonTrain <- vroom("amazon.train.csv")
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> amazonTest <- vroom("amazon.test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> amazon_recipe <- recipe(ACTION~., data=amazonTrain) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>% # combines categorical values that occur <5% into an "other" value
+   step_dummy(all_nominal_predictors()) %>%# dummy variable encoding
+   step_mutate(ACTION=as.factor(ACTION), skip=TRUE) %>%
+   step_normalize(all_numeric_predictors())
> 
> # apply the recipe to your data
> prep <- prep(amazon_recipe)
> baked <- bake(prep, new_data = amazonTrain)
> 
> ## knn model
> knn_model <- nearest_neighbor(neighbors=tune()) %>% # set or tune
+   set_mode("classification") %>%
+   set_engine("kknn")
> 
> knn_wf <- workflow() %>%
+   add_recipe(amazon_recipe) %>%
+   add_model(knn_model)
> 
> ## Fit or Tune Model HERE
> # Set up grid of tuning values 
> tuning_grid <- grid_regular(neighbors(), levels = 3)
> 
> # Set up K-fold CV
> folds <- vfold_cv(amazonTrain, v = 5, repeats = 1)
> 
> # Find best tuning parameters 
> CV_results <- knn_wf %>%
+   tune_grid(
+     resamples = folds,
+     grid = tuning_grid,
+     metrics = metric_set(roc_auc),
+     control = control_grid(verbose = TRUE)  # Enable verbose output to monitor progress
+   )
i Fold1: preprocessor 1/1
✓ Fold1: preprocessor 1/1
i Fold1: preprocessor 1/1, model 1/1
✓ Fold1: preprocessor 1/1, model 1/1
i Fold1: preprocessor 1/1, model 1/1 (extracts)
i Fold1: preprocessor 1/1, model 1/1 (predictions)
i Fold2: preprocessor 1/1
✓ Fold2: preprocessor 1/1
i Fold2: preprocessor 1/1, model 1/1
✓ Fold2: preprocessor 1/1, model 1/1
i Fold2: preprocessor 1/1, model 1/1 (extracts)
i Fold2: preprocessor 1/1, model 1/1 (predictions)
i Fold3: preprocessor 1/1
✓ Fold3: preprocessor 1/1
i Fold3: preprocessor 1/1, model 1/1
✓ Fold3: preprocessor 1/1, model 1/1
i Fold3: preprocessor 1/1, model 1/1 (extracts)
i Fold3: preprocessor 1/1, model 1/1 (predictions)
i Fold4: preprocessor 1/1
✓ Fold4: preprocessor 1/1
i Fold4: preprocessor 1/1, model 1/1
✓ Fold4: preprocessor 1/1, model 1/1
i Fold4: preprocessor 1/1, model 1/1 (extracts)
i Fold4: preprocessor 1/1, model 1/1 (predictions)
i Fold5: preprocessor 1/1
✓ Fold5: preprocessor 1/1
i Fold5: preprocessor 1/1, model 1/1
✓ Fold5: preprocessor 1/1, model 1/1
i Fold5: preprocessor 1/1, model 1/1 (extracts)
i Fold5: preprocessor 1/1, model 1/1 (predictions)
> 
> ## Find Best Tuning Parameters
> bestTune <- CV_results %>%
+   select_best("roc_auc")
> 
> ## Finalize the Workflow & fit it
> final_knn_wf <-
+   knn_wf %>%
+   finalize_workflow(bestTune) %>%
+   fit(data=amazonTrain)
> 
> ## Predict
> final_knn_wf %>%
+   predict(new_data = amazonTrain, type="prob")
# A tibble: 32,769 × 2
   .pred_0 .pred_1
     <dbl>   <dbl>
 1   0       1    
 2   0       1    
 3   0       1    
 4   0       1    
 5   0       1    
 6   0.470   0.530
 7   0.154   0.846
 8   0       1    
 9   0       1    
10   0.192   0.808
# ℹ 32,759 more rows
> 
> knn_predictions <- predict(final_knn_wf,
+                              new_data=amazonTest,
+                              type="prob") # "class" or "prob" (see doc)
> 
> knn_predictions <- cbind(amazonTest$id, knn_predictions) %>%
+   rename(Id = "amazonTest$id",
+          Action = ".pred_1") #%>%
> #select (-"amazonTest$id")
> 
> vroom_write(x=knn_predictions, file="knn.csv", delim=",")
> 
> proc.time()
     user    system   elapsed 
28270.695    67.314 28338.808 
